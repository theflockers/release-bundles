---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: publish-index-image
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
      Publish a built FBC index image using skopeo
  params:
    - name: requestJsonResults
      type: string
      description: The JSON result of the IIB build internal request
    - name: targetIndex
      type: string
      description: targetIndex signing image
    - name: retries
      type: string
      default: "0"
      description: Number of skopeo retries
    - name: publishingCredential
      type: string
      default: "fbc-publishing-pull-secret"
      description: The credentials used to access the registry
    - name: requestUpdateTimeout
      type: string
      default: "360"
      description: Max seconds waiting for the status update
  results:
    - name: requestMessage
  steps:
    - name: publish-index-image
      image: >-
        quay.io/hacbs-release/release-base-image@sha256:9e7fd1a3ccf0d2c8077f565c78e50862a7cc4792d548b5c01c8b09077e6d23a7
      volumeMounts:
        - name: publishing-secret
          mountPath: /mnt/$(params.publishingCredential)
          readOnly: true
      script: |
        #!/usr/bin/env sh
        PATH=/bin:/usr/bin:/usr/local/bin
        export PATH

        jsonInputFile="/tmp/$$.json"
        cat > ${jsonInputFile} <<JSON
        $(params.requestJsonResults)
        JSON

        internalIndexImageCopyResolved=`jq -cr .jsonBuildInfo ${jsonInputFile} \
        | jq -cr .internal_index_image_copy_resolved`

        # rewrite the internal URL for the registry proxy to quay.io
        # i.e.
        #   registry-proxy.engineering.redhat.com/rh-osbs/iib@foo ->
        #   quay.io/rh-osbs/iib@foo
        sourceIndex=$(echo ${internalIndexImageCopyResolved} | sed 's/.*registry-proxy.*com\//quay.io\//g')

        skopeo copy \
        --all \
        --preserve-digests \
        --retry-times "$(params.retries)" \
        --src-tls-verify=false \
        --authfile=/mnt/$(params.publishingCredential)/.dockerconfigjson \
        "docker://${sourceIndex}" \
        "docker://$(params.targetIndex)" > $(results.requestMessage.path)
  volumes:
    - name: publishing-secret
      secret:
        secretName: $(params.publishingCredential)
